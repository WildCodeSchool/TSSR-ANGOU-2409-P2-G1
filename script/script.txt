
DualLAN

fonction_droits_utilisateur() {

echo "
=========================================================
|		Gestion droits utilisateur		|
=========================================================
| 1 - Droits utilisateur fichier			|
| 2 - Droits utilisateur dossier			|
| x - Menu précédent					|
=========================================================
"

read -p "Quels informations souhaitez-vous ? " choix_utilisateur

    case $droits_utilisateur in

        1)
            read -p "Entrez le nom du fichier : " nom_fichier
            if [[ -f $nom_fichier ]]; then
                echo "Droits attribués au fichier $nom_fichier :"
                ls -l "$nom_fichier"
            else
                echo "Le fichier $nom_fichier n'existe pas."
            fi
            ;;
        2)
            read -p "Entrez le nom du dossier : " nom_dossier
            if [[ -d $nom_dossier ]]; then
                echo "Droits attribués au dossier $nom_dossier :"
                ls -ld "$nom_dossier"
            else
                echo "Le dossier $nom_dossier n'existe pas."
            fi
            ;;

	x|X)

		;;
	
        *)
            fonction_droits_utilisateur
            ;;
    esac
}

# Appel de la fonction
fonction_droits_utilisateur

____________________________________________________________________________________________________________________________________________________________________________
Powerxell

#!/bin/bash

utilisateur=wilder
ip=172.16.10.30

version_os () {


	ssh $utilisateur@$ip "cat /etc/*release"
	sleep 3s


}

version_os
____________________________________________________________________________________________________________________________________________________________________________

#!/bin/bash

utilisateur=wilder
ip=172.16.10.30

groupe_user () {

	ssh $utilisateur@$ip "sudo -S groups $utilisateur"
	sleep 3s

}

groupe_user
____________________________________________________________________________________________________________________________________________________________________________

#!/bin/bash

utilisateur=wilder
ip=172.16.10.30

info_ram () {

	ssh $utilsateur@$ip "free -h -m"
	sleep 3s

}

info_ram
____________________________________________________________________________________________________________________________________________________________________________

____________________________________________________________________________________________________________________________________________________________________________

Fabridge


#!/bin/bash


  		2) echo "$(date +%F-%X) - $USER - Afficher les informations partitions par disques" >> /var/log/log_evt.txt
  		ssh $utilisateur@$ip " df-h"
  		;;
  		
  		3) echo "$(date +%F-%X) - $USER - Afficher l'espace disque restant" >> /var/log/log_evt.txt
  		ssh $utilisateur@$ip " df"
  		;;
  		
  		4) echo "$(date +%F-%X) - $USER - Afficher le nom espace disque d'un dossier" >> /var/log/log_evt.txtinfo_disque () {


echo "1 - Afficher nombre de disque"
echo "2 - Afficher les informations partitions par disque"
echo "3 - Afficher l'espace disque restant"
echo "4 - Afficher le nom et l'espace disque d'un dossier"
echo "5 - Afficher les lecteurs montés"
echo "* - Erreur"

read -p "Veuillez renseigner le disque à consulter : " choix_disque

 case $choix_disque in 
 
  		1)  echo "$(date +%F-%X) - $USER - Afficher le nombre de disques" >> /var/log/log_evt.txt
  		ssh $utilisateur@$ip "fdisk -l $choix_disque" 
  		;;
  		

  		ssh $utilisateur@$ip "df -k"
  		;;
  		
  		5) echo "$(date +%F-%X) - $USER - Afficher les lecteurs montés" >> /var/log/log_evt.txt
  		ssh $utilisateur@$ip "lsblk"
  		;;
  		
  		*) echo "Erreur"
  		;;
  		
esac  			

}

info_disque
____________________________________________________________________________________________________________________________________________________________________________

Powerxell

#!/bin/bash

utilisateur=wilder
ip=172.16.10.30

gestion_groupe () {

echo "
=========================================================
|		Gestion des groupes			|
=========================================================
| 1 - Ajout à un groupe d'administration		|
| 2 - Ajout à un groupe local				|
| 3 - Sortie d'un groupe local				|
| x - Menu précédent					|
=========================================================
"

read choix_groupe

case $choix_groupe in

	1)
		echo "$(date +%F-%X) - $USER - Utilisateur - Action - Ajout de l'utilisateur : $utilisateur au groupe administrateur" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "usermod -aG sudo $utilisateur"
		sleep 3s
		return
		;;

	2)
		echo "$(date +%F-%X) - $USER - Utilisateur - Action - Ajout de l'utilisateur : $utilisateur au groupe : $groupe" >> /var/log/log_evt.txt
		read -p "Renseignez le groupe auquel vous souhaitez ajouter l'utilisateur : " groupe
		ssh $utilisateur@$ip "usermod -aG $groupe $utilisateur"
		sleep 3s
		return
		;;

	3)
		echo "$(date +%F-%X) - $USER - Utilisateur - Action - Suppression de l'utilisateur : $utilisateur du groupe : $groupe" >> /var/log/log_evt.txt
		read -p "Renseignez le groupe auquel vous souhaitez ajouter l'utilisateur : " 	groupe
		ssh $utilisateur@$ip "usermod -G $groupe $ utilisateur"
		sleep 3s
		return
		;;

	x|X)

		;;

	*)
		gestion_groupe
		;;

esac
}

==================================================================================================================================================================

# mise_jour_system 

theofile

# CODE MIS A JOUR D'UN  OS

mise_a_jour () {

# Mise à jour des dépôts de paquets

 echo "Mise à jour des dépôts de paquets..."

ssh $utilisateur@$ip "sudo -S apt update"

# Mise à jour des paquets installés

echo "Mise à jour des paquets installés..."

ssh $utilisateur@$ip "sudo -S apt upgrade -y "

# Nettoyage des paquets obsolètes

echo "Nettoyage des paquets obsolètes..."

ssh $utilisateur@$ip "sudo -S apt autoremove -y apt autoclean "

# Mise à jour du noyau (exemple pour une distribution utilisant apt)

echo "Mise à jour du noyau..."

ssh $utilisateur@$ip "sudo -S apt install --install-recommends linux-generic "

# Redémarrage pour appliquer les mises à jour du noyau

echo "Le système doit être redémarré pour appliquer les mises à jour du noyau."

read -p " voulez-vous redémarrer votre ordinateur ?" restart

case $restart in

        o|O|y|Y|Oui|oui|yes|Yes)
                restart
                ;;
        *)
                echo "Pensez à redémarrer votre ordinateur pour l'applications des paquets installés."
                echo "Retour au menu principal"
                sleep 2s
                ;;
esac


}

____________________________________________________________________________________________________________________________________________________________________________

gestion_firewall () {

echo "
=========================================================
|		Gestion du pare-feu			|
=========================================================
| 1 - Activer le pare-feu				|
| 2 - Désactiver le pare-feu				|
| x - Menu précédent					|
=========================================================
"

read choix

case $choix in 

	1)
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Activation du pare-feu" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo ufw enbale"
		sleep 3s
		return
		;;
	2)
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Désactivation du pare-feu" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo ufw disable"
		sleep 3s
		return
		;;

	x|X)
		
		;;
	*)
		gestion_firewall
		;;

esac

}
____________________________________________________________________________________________________________________________________________________________________________

gestion_alim() {

echo "
=========================================================
|		Gestion de l'alimentation		|
=========================================================
| 1 - Arrêt ordinateur					|
| 2 - Redémarer l'ordinateur				|
| 3 - Verrouiller l'ordinateur				|
| x - Menu précédent					|
=========================================================
"

read -p "Quelle action voulez-vous réaliser : " choix_computer

case $choix_computer in
	1)
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Arret Ordinateur" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo -S shutdown now"
		co_ssh
		;;
	2)
	
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Redemarrage Ordinateur" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo -S shutdown -r now"
		;;
		
	3)
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Verrouillage Ordinateur" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo -S gnome-screensaver-command -l"
		;;
		
		
	x|X)    
		
		;;
		
		
	*)      
		gestion_alim
		;;
		
esac

}
____________________________________________________________________________________________________________________________________________________________________________

gestion_logiciel () {

echo "
=========================================================
|		Gestion logiciel			|
=========================================================
| 1 - Installation logiciel				|
| 2 - Désinstallation logiciel				|
| x - Menu précédent 					|
=========================================================
"

read choix_logiciel

case $choix_logiciel in

	1)
		read -p "Renseignez le nom de l'application à installer : " app
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Installation de l'application $app" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo apt install $app"
		sleep 3s
		;;

	2)
		read -p "Renseignez le nom de l'application à désinstaller : " app
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Désinstallation de l'application $app" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo apt remove $app --purge "
		sleep 3s
		;;

	x|X)
		
		;;

	*)
		gestion_utilisateur
		;;
esac

}
____________________________________________________________________________________________________________________________________________________________________________

Fabridge

#!/bin/bash

gestion_directory () {

echo "1 - Création de Répertoire"
echo "2 - Modification de Répertoire"
echo "3 - Suppression de Répertoire"
echo "4 - Retour Menu Précédent"

read -p "Quelle action voulez-vous réaliser : " choix_directory


case $choix_directory in 

	1)
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Création de Répertoire" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo -S mkdir $directory"
		;;

	2)
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Modification de Répertoire" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo -S mv $directory"
		;;

	3)
		echo "$(date +%F-%X) - $USER - Ordinateur - Action - Suppression de Répertoire" >> /var/log/log_evt.txt
		ssh $utilisateur@$ip "sudo -S rm -r $directory"
		;;
		
	4)	echo "Retour Menu Précédent"
		menu_action
		;;

esac
		
}

gestion_directory
____________________________________________________________________________________________________________________________________________________________________________

activite_utilisateur () {

echo "
===========================================================
|        INFORMATION ACTIVITE UTILISATEUR                 |
===========================================================
| 1 - Date des dernières connexions de l'utilisateur       |
| 2 - Date des dernières changements de mot de passe       |
| 3 - Liste des sessions ouvertes pour l'utilisateur      |
| x - Menu précédent                                      |
===========================================================
"


read -p "Veuillez choisir une option : " choix_user

case $choix_user in

                1) 
			echo "$(date +%F-%X) - $USER - Utilisateur - Information - Modification de Répertoire" >> /var/log/log_evt.txt
			read -p "Nom d'utilisateur " user
              		echo " Date de dernière connexion pour $user :"
                	lastlog -u $user
               		;;

                2) 
			echo "$(date +%F-%X) - $USER - Utilisateur - Information - Modification de Répertoire" >> /var/log/log_evt.txt
			read -p "Nom d'utilisateur " user
	                echo -e "Date de dernière modification du mot de passe pour >
                   	grep 'passwd' /var/log/auth.log
                	;;

                3) 
			echo "$(date +%F-%X) - $USER - Utilisateur - Information - Modification de Répertoire" >> /var/log/log_evt.txt
			read -p "Nom d'utilisateur " user
                 	echo -e "\nListe des sessions ouvertes pour l'utlisateur $us>
                	who | grep $user || echo 'Aucune session ouverte pour $user.'
                	;;

                x|X)
                	;;


                *)
                	activite_utilisateur
                	;;

esac

}

activite_utilisateur



___________________________________________________________________________________________________________________________________________________________________


Theofile


#projet2.ps1
function co_SSH {
    # Demander nom utilisateur     
    $utilisateur=Read-Host -Prompt  "indiquez l'utilisateur sur lequel vous connecter "                                                 
    # Demander l'IP de l'utilisateur
    $ip=Read-Host -Prompt "indiquer l'IP du poste client"
    # nom de l'utilisateur
     Write-Host "$utilisateur"
     Write-Host "$ip"
}

co_SSH

function menu_action {                                                

    # Menu des actions, choix à faire pour intéragir sur un compte utilisateur ou sur une machine directement

    Write-Host
" 
=========================================================
     |  		   	Menu Action	                |
=========================================================
|       1 : Gestion de l'utilisateur	        |
|       2 : Gestion de l'ordinateur			    |
|       3 : Prise de main à distance			|
|	    X : Retour au menu principal			|
=========================================================   

"
$choix = Read-Host -Prompt "faites votre choix"




switch ($choix){ 

    '1' {
    # definir le chemin du fichier de log

        $logFilePath = "C:\Logs\log_evt.txt"

    # obtenir la date et l'heure souhaitée

        $date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

    # Construire le message de log 

      $message = "$date - $utilisateur - Action - Vers la gestion utilisateur"

     # Écrire le message dans le fichier de log
     
       Add-Content -Path $logFilePath -Value $message
 
    }
 
    '2'{ 
        # Construire le message de log 

      $message = "$date - $utilisateur - Action - Vers la gestion de l'ordinateur"

     # Écrire le message dans le fichier de log
     
       Add-Content -Path $logFilePath -Value $message
    
     }
    
    3 {  
        
        # Construire le message de log 

         ssh "$utilisateur@$ip"
        
         $message = "$date - $utilisateur - Action - Prise de main à distance de $ip sous l'utilisateur $utilisateur" 

		  # Écrire le message dans le fichier de log
     
          Add-Content -Path $logFilePath -Value $message
      Write-Host "bonjour"
        }

   'X'{

   $message = "$date - $utilisateur - Retour au menu principal" 

   # Écrire le message dans le fichier de log
     
   Add-Content -Path $logFilePath -Value $message

		Write-Host "Retour au menu principal."
   }
   
}
}
   menu_action






