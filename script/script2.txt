MENU (PRINCIPAL/ACTION/INFO)
________________________________________________________________________________________________________________________________________

# Début des logs avec le start script
 Add-Content -Path C:\PerfLogs\log_evt.log -Value  "$logc - *******Start Script*******"
 # Menu principal

 While ($true) {
 Clear-host
 Write-Host 
 "
=========================================================
|               Menu Principal			                |
=========================================================
|       1 : Obtenir une informations		            |
|       2 : Effectuer une action		                |
|       3 : Quitter			                            |
========================================================="

$choix = Read-Host "Faites votre choix"

switch ($choix) {

    1 { 
   	  Add-Content -Path C:\PerfLogs\log_evt.log -Value  "$logc - Redirection vers menu information"
   	  menu_info
        }
    2 {
       	 Add-Content -Path C:\PerfLogs\log_evt.log -Value  "$logc - Redirection vers menu action"
     	 menu_action
        }
    3 {
       	 Add-Content -Path C:\PerfLogs\log_evt.log -Value  "$logc - *******Stop Script*******"
     	 exit
        }
    default {
        }
    }
}

function menu_action {
Clear-Host
Write-Host
"
=========================================================
|  		   	Menu Action	                                |
=========================================================
|       1 : Gestion de l'utilisateur	                |
|       2 : Gestion de l'ordinateur			            |
|       3 : Prise de main à distance	(CLI)         	|
|	    X : Retour au menu principal		         	|
=========================================================
"
$choix_action = Read-Host "Faites votre choix"

switch ($choix_action) {

    1 {
        # Redirection vers la gestion d'utilisateur
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Vers la gestion utilisateur"
        gestion_user
        }
    2 {
          # Redirection vers la gestion ordinateur
          Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Vers la gestion ordinateur"
          gestion_computer
          }
    3 {
          # Prise de main à distance
          Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Prise de main à distance"
          }
    X {
          # Retour au menu principal
          Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu principal"
          Write-Host "Retour au menu principal"
          Start-Sleep -Seconds 1
          } 
    default {
            # Retour au menu en cours en cas d'erreur
          menu_action
          }
  }
}
menu_action




FONCTION ACTION
________________________________________________________________________________________________________________________________________

#activite_user.ps1

# Menu Informations de l'activité de l'utilisateur
function activite_user {
    Clear-Host
    Write-Host "=============================================================="
    Write-Host "|           Information Activite Utilisateur                 |"
    Write-Host "=============================================================="
    Write-Host "| 1 - Date des dernières connexions de l'utilisateur         |"
    Write-Host "| 2 - Date des dernières changements de mot de passe         |"
    Write-Host "| 3 - Liste des sessions ouvertes pour l'utilisateur         |"
    Write-Host "| x - Retour au menu précédent                               |"
    Write-Host "=============================================================="

    $choix_user = Read-Host "Faites votre choix : "

    switch ($choix_user) {
        # Informations sur les dernières connexions de l'utilisateur cible
        1 {  
            $wilder = Read-Host "Renseignez le nom de l'utilisateur cible : " ;
            Write-Host "Dates des dernières connexions de l'utilisateur $wilder : " ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Info - Dernières connexions de l'utilisateur" ;
            Invoke-Command -ComputerName $ip -ScriptBlock {
                $DCList = Get-ADDomainController -Filter * | Sort-Object Name | Select-Object Name
                $TargetUser = $wilder
                $TargetUserLastLogon = $null
                Foreach($DC in $DCList){

                    $DCName = $DC.Name
             
                    Try {
                        
                        # Récupérer la valeur de l'attribut lastLogon à partir d'un DC (chaque DC tour à tour)
                        $LastLogonDC = Get-ADUser -Identity $TargetUser -Properties lastLogon -Server $DCName
            
                        # Convertir la valeur au format date/heure
                        $LastLogon = [Datetime]::FromFileTime($LastLogonDC.lastLogon)
            
                        # Si la valeur obtenue est plus récente que celle contenue dans $TargetUserLastLogon
                        # la variable est actualisée : ceci assure d'avoir le lastLogon le plus récent à la fin du traitement
                        If ($LastLogon -gt $TargetUserLastLogon)
                        {
                            $TargetUserLastLogon = $LastLogon
                        }
             
                        # Nettoyer la variable
                        Clear-Variable LastLogon
                        }
            
                    Catch {
                        Write-Host $_.Exception.Message -ForegroundColor Red
                    }
            }
            
            Write-Host "Date de dernière connexion de $TargetUser :"
            Write-Host $TargetUserLastLogon
            } ;
            Start-Sleep -Seconds 2
        }

        # Informations sur les derniers changements de mot de passe de l'utilisateur cible
        2 {  
            $wilder = Read-Host "Renseignez le nom de l'utilisateur cible : " ;
            Write-Host "Dates des dernières modifications du mot de passe pour $wilder : " ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Info - Derniers changements de mot de passe" ;
            Invoke-Command -ComputerName $ip -ScriptBlock {Get-ADUser -filter $wilder -properties passwordlastset, passwordneverexpires |ft Name, passwordlastset, Passwordneverexpires} ;
            Start-Sleep -Seconds 2
        }

        # Informations liste des sessions ouvertes de l'utilisateur cible
        3 {
            $wilder = Read-Host "Renseignez le nom de l'utilisateur cible : " ;
            Write-Host "Liste des sessions ouvertes pour l'utilisateur $wilder" ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Info - Liste des sessions ouvertes de l'utilisateur" ;
            Invoke-Command -ComputerName $ip -ScriptBlock {Get-localUser -name $using:utilisateur | Select-Object Enabled} -Credential Get-Credential -Credential $utilisateur ;
            Start-Sleep -Seconds 2
        }
        
        # Retour au menu précédent
        x {  
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2 ;
            info_user
        }

        # En cas d'erreur, retour au menu de la fonction
        Default {
            activite_user
        }
    }

}



# Fonction pour la gestion de l'alimentation du PC cible

function Gestion-Alim {
    Clear-Host
    Write-Host "
=========================================================
|               Gestion de l'alimentation               |
=========================================================
|     1 - Arrêter l'ordinateur                          |
|     2 - Redémarrer l'ordinateur                       |
|     3 - Verrouiller l'ordinateur                      |
|     X - Menu précédent                                |
=========================================================
"
    $choix = Read-Host "Faites votre choix"

    switch ($choix) {
        1 {
            $confirm = Read-Host "Êtes-vous sûr de vouloir arrêter l'ordinateur ? (o/n)"
            if ($confirm -match '^(o|O)$') {
                $log = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Action - Arrêt Ordinateur"
                Add-Content -Path "C:\Logs\log_evt.txt" -Value $log
                Stop-Computer -Force
            } else {
                Write-Host "Action annulée."
                Start-Sleep -Seconds 1
                Gestion-Alim
            }
        }
        2 {
            $confirm = Read-Host "Êtes-vous sûr de vouloir redémarrer l'ordinateur ? (o/n)"
            if ($confirm -match '^(o|O)$') {
                $log = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Action - Redémarrage Ordinateur"
                Add-Content -Path "C:\Logs\log_evt.txt" -Value $log
                Restart-Computer -Force
            } else {
                Write-Host "Action annulée."
                Start-Sleep -Seconds 1
                Gestion-Alim
            }
        }
        3 {
            $log = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Action - Verrouillage Ordinateur"
            Add-Content -Path "C:\Logs\log_evt.txt" -Value $log
            rundll32.exe user32.dll, LockWorkStation
        }
         X {
            $log = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Retour au menu précédent"
            Add-Content -Path "C:\PerfLogs\log_evt.log" -Value $log
            Write-Host "Retour au menu précédent."
            gestion_computer
        }
        Default {
            Write-Host "Option invalide. Veuillez réessayer."
            Start-Sleep -Seconds 1
            Gestion-Alim
            }
    }
}


# Fonction pour la gestion de répertoires
function gestion_directory {
    Clear-Host
    Write-Output "=================================="
    Write-Output "|   Gestion des répertoires      |"
    Write-Output "=================================="
    Write-Output "| 1 - Création de répertoire     |"
    Write-Output "| 2 - Modification de répertoire |"
    Write-Output "| 3 - Suppression de répertoire  |"
    Write-Output "| x - Menu précédent             |"
    Write-Output "=================================="
    
    $Choix_Directory = Read-Host "Faites votre choix : "
  
    switch ($Choix_Directory) {
    # Créer le répertoire à partir du nom et du chemin renseignés
        1 { $pathdir = Read-Host "Quel est le chemin du dossier que vous souhaitez créer ?" ; 
            $directory = Read-Host "Quel dossier souhaitez-vous créer à partir de $pathdir ?" ; 
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Création de Répertoire $directoy" ;
            New-Item -Path $pathdir\ -ItemType Directory -Name $directory ;
            Write-Output "Création de $directory effectuée."
        }
    # Modifier le répertoire à partir du nom, du chemin et du nouveau nom renseignés
        2 { $pathdir = Read-Host "Quel est le chemin du dossier que vous souhaitez modifier ?" ;
            $directory = Read-Host "Quel est le nom du dossier que vous souhaitez modifier ?" ;
            $dir_name = Read-Host "Quel nouveau nom souhaitez lui donner ?" ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Modification de Répertoire $directory" ;
            Rename-Item -Path $pathdir\$directory -NewName $dir_name ;
            Write-Output "Modification de $directory en $dir_name effectuée."
        }
    # Supprimer le répertoire à partir du nom et du chemin renseignés 
        3 { $pathdir = Read-Host "Quel est le chemin du dossier que vous souhaitez supprimer ?" ; 
            $directory = Read-Host "Quel dossier souhaitez-vous supprimer ?" ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Modification de Répertoire $directory" ;
            Remove-Item -Path $pathdir\$directory ;
            Write-Output "Suppression de $directory effectuée"
        }
    # Retour au menu précédent
        x { Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent $directory" ;
            Write-Host "Retour Menu Précédent" ; 
            menu_action
        }
    # Retour au menu précédent
        X { Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent $directory" ;
            Write-Host "Retour Menu Précédent" ; 
            menu_action
        }
    # En cas d'erreur, retour au menu de la fonction
        Default { Write-Output "Erreur retour au choix" ; 
            gestion_directory
        }
    }
}

#gestion_firewall.ps1

# Menu de Gestion du pare-feu
function gestion_firewall {
    Clear-Host
    Write-Host "=============================="
    Write-Host "|     Gestion du pare-feu    |"
    Write-Host "=============================="
    Write-Host "| 1 - Activer le pare-feu    |"
    Write-Host "| 2 - Désactiver le pare-feu |"
    Write-Host "| x - Menu précédent         |"
    Write-Host "=============================="

    $choix_firewall = Read-Host "Faites votre choix : "
    
    switch ($choix_firewall) {
        # Activer le pare-feu
        1{
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Activation du pare-feu" ;
            Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True ;
            Write-Host "Pare-feu activé" ;
            Start-Sleep -Seconds 2
        }
        # Désactiver le pare-feu
        2 {
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Désactivation du pare-feu" ;
            Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False ;
            Write-Host "Pare-feu désactivé" ;
            Start-Sleep -Seconds 2
        }
        # Retour au menu précédent
        x {
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2 ;
            gestion_computer
        }
        # Retour au menu précédent
        X {
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2 ;
            gestion_computer
        }
        # En cas d'erreur, retour au menu de la fonction
        Default {
            gestion_firewall
        }
    }
}

#gestion_groupe.ps1

# Menu de Gestion des groupes
function gestion_groupe {
    Clear-Host
    Write-Host "=========================================="
    Write-Host "|          Gestion des groupes           |"
    Write-Host "=========================================="
    Write-Host "| 1 - Ajout à un groupe d'administration |"
    Write-Host "| 2 - Ajout à un groupe local            |"
    Write-Host "| 3 - Sortie d'un groupe local           |"
    Write-Host "| x - Menu précédent                     |"
    Write-Host "=========================================="

    $choix_groupe = Read-Host "Faites votre choix : "

    switch ($choix_groupe) {
        # Ajout de l'utilisateur cible au groupe d'administration
        1 {  $wilder = Read-Host "Indiquez quel utilisateur à ajouter au groupe d'administration" ;
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Ajout de l'utilisateur : $wilder au groupe administrateur" ;
        Add-LocalGroupMember -Group "Administrateurs" -Member "$wilder" ;
        Start-Sleep -Seconds 2
        }

        # Ajout de l'utilisateur cible au groupe local
        2 {  $wilder = Read-Host "Renseignez l'utilisateur sur lequel travailler : " ;
        $groupe = Read-Host "Renseignez le groupe auquel vous souhaitez ajouter l'utilisateur : " ;
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Ajout de l'utilisateur : $wilder au groupe : $groupe" ;
        Add-LocalGroupMember -Group "$groupe" -Member "$wilder" ;
        Start-Sleep -Seconds 2
        }

        # Sortie de l'utilisateur cible d'un groupe local
        3 {  $wilder = Read-Host "Renseignez l'utilisateur sur lequel travailler : " ;
        $groupe = Read-Host "Renseignez le groupe auquel vous souhaitez supprimer l'utilisateur" ;
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Suppression de l'utilisateur : $wilder du groupe : $groupe" ;
        Remove-LocalGroupMember -Group "$groupe" -Member "$wilder" ;
        Start-Sleep -Seconds 2
        }

        # Retour au menu précédent
        x {  Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2
        }

        # Retour au menu précédent
        X {  Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2
        }

        # En cas d'erreur, retour au menu de la fonction
        Default {
            gestion_groupe
        }
    }
    
}

#gestion_user.ps1

# Fonction pour la création d'un utilisateur
#function create_user {
#    
#    $wilder = Read-Host "Veuillez renseigner le nom de l'utilisateur à créer : "
#    # Si utilisateur existe déjà alors retour au menu gestion utilisateur
#    if (Invoke-Command -ComputerName $ip -ScriptBlock {Get-LocalUser -Name $wilder - True}) {
#        Read-Host "$wilder existe déjà" ;
#        Start-Sleep -Seconds 2 ;
#        gestion_user
#    }
    # Sinon création de l'utilisateur
#    else {
#        Invoke-Command -ComputerName $ip -ScriptBlock {New-LocalUser -Name $wilder}
#        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Utilisateur $wilder créé" ;
#        Start-Sleep -Seconds 2
#    }
#    
#}


# Menu de Gestion Utilisateur
function gestion_user {
    Clear-Host
    Write-Host "============================================="
    Write-Host "|         Menu Gestion Utilisateur          |"
    Write-Host "============================================="
    Write-Host "| 1 - Création d'un compte utilisateur      |"
    Write-Host "| 2 - Modification du mot de passe          |"
    Write-Host "| 3 - Suppression d'un compte utilisateur   |"
    Write-Host "| 4 - Désactivation d'un compte utilisateur |"
    Write-Host "| 5 - Gestion des groupes utilisateur       |"
    Write-Host "| x - Retour au menu précédent              |"
    Write-Host "| p - Retour au menu principal              |"
    Write-Host "============================================="

    $choix_gestion = Read-Host "Faites votre choix : "

    switch ($choix_gestion) {
        # Accès à la création d'utilisateur
        1 { 
            $wilder = Read-Host "Veuillez renseigner le nom de l'utilisateur à créer : " ;
            $motdepasse = Read-Host "Renseignez le mot de passe pour l'utilisateur à créer : " -AsSecureString ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Création d'utilisateur" ;
            $petit_script = {
                param($wilder, $motdepasse)
                New-LocalUser -Name $wilder -Password $motdepasse
            }
            Invoke-Command -ComputerName $ip -ScriptBlock $petit_script -ArgumentList $Nom, $motdepasse -Credential $credential ;
            Write-Host "Création de l'utilisateur local : $wilder" ;
            Start-Sleep -Seconds 2
#           create_user
        }

        # Modification du mot de passe de l'utilisateur cible
        2 {  
            $wilder = Read-Host "De quel utilisateur souhaitez-vous modifier le mot de passe" ;
            Invoke-Command -ComputerName $ip -ScriptBlock {$NewPwd = Read-Host -AsSecureString ; Get-LocalUser -Name $wilder | Set-LocalUser -Password $NewPwd} ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Changement de mot de passe de $wilder établi" ;
            Write-Host "Le mot de passe de $wilder a été modifié avec succès"
            Start-Sleep -Seconds 2
        }

        # Suppression de l'utilisateur cible
        3 {  
            $wilder = Read-Host "Quel compte utilisateur souhaitez-vous supprimer ? " ;
            Invoke-Command -ComputerName $ip -ScriptBlock {Remove-LocalUser -Name $wilder} ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Suppression de $wilder effectuée" ;
            Write-Host "L'utilisateur $wilder a bien été supprimé" ;
            Start-Sleep -Seconds 2
        }

        # Désactivation de l'utilisateur cible
        4 {  
            $wilder = Read-Host "Quel compte utilisateur souhaitez-vous désactiver ? " ;
            Invoke-Command -ComputerName $ip -ScriptBlock {Disable-LocalUser -Name "$wilder"} ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Désactivation du compte utilisateur $wilder" ;
            Write-Host "Désactivation de $wilder réussie" ;
            Start-Sleep -Seconds 2 ; 
        }

        # Accès à la gestion des groupes
        5 {  
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Gestion des groupes" ;
            gestion_groupe
        }

        # Retour au menu précédent
        x {  
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent " ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2 ;
            menu_aciton
        }

        # Retour au menu précédent
        X {  
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent " ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2 ;
            menu_aciton
        }

        # Retour au menu principal
        p {  
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu principal " ;
            Write-Host "Retour au menu principal" ;
            Start-Sleep -Seconds 2 ;
#           menu_principal
        }

        #Retour au menu principal
        P {  
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu principal " ;
            Write-Host "Retour au menu principal" ;
            Start-Sleep -Seconds 2 ;
#           menu_principal
        }

        # En cas d'erreur, retour au menu de la fonction
        Default {
            gestion_user
        }
    }
}

_____________________________________________________________________________________________________________________________________________________________________________
FONCTION INFORMATION

# Fonction pour obtenir la version de l'OS
function version_OS {
    Clear-Host
    Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Info - Version de l'OS"
    Get-WmiObject Win32_OperatingSystem | findstr /C:"Version"
    
}

# Fonction pour obtenir les informations RAM (/!\ Pas fonctionnel sur VM /!\ Solution à trouver)
function info_ram {
    Clear-Host
    Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Info - RAM"
    Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object FreePhysicalMemory, TotalVisibleMemorySize
}
___________________________________________________________________________________________________________________________________________________________________________
FONCTON ACTIVITE ORDI

## Menu de l'activité de l'ordinateur cible

function activite_ordi {

    Clear-Host
    Write-Host "
    ==================================================
    | 		Activité ordinateur	             |
    | 1 : Liste des applications / paquets installés |
    | 2 : Liste des services en cours d'exécution    |
    | 3 : Liste des utilisateurs locaux		     |
    | X : Retour au menu précédent		     |
    ==================================================
        "


    $choix_activite = Read-Host "Faites votre choix"


# Affichage de la liste des applications/ paquets installés sur l'ordinateur cible

    Switch ($choix_activite) {
        1 {
            Write-Host "Ordinateur - Info - Liste des applications / paquets installées :"
            Get-Package
	    Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc
            Start-Sleep -Seconds 3
            activite_ordi


# Affichage de la liste des services en cours d'exécution

        }
        2 { 
            Write-Host "Ordinateur - Info - Liste des services en cours d'execution :"
            Get-Service | Where-Object { $_.Status -eq "Running" }
	    Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc
            Start-Sleep -Seconds 3
            activite_ordi


# Affichage de la liste des utilisateurs locaux

        }

        3 { 
            Write-Host "Ordinateur - Info - Liste des utilisateurs locaux :"
            Get-LocalUser | Format-Table -AutoSize
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc
            Start-Sleep -Seconds 3
            activite_ordi
        }

# Retour au menu précédent

        x {Write-Host "Retour Menu Précédent" ; 
        menu_action}

         X {Write-Host "Retour Menu Précédent" ; 
        menu_action}

        Default {Write-Output "Erreur retour au choix" ; activite_ordi}
    }

}

activite_ordi

__________________________________________________________________________________________________________________________________________________________________________

function search_log {
$logc = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - $env:COMPUTERNAME"
Clear-Host

Write-Host "
===========================================
| 	     Type de recherche	              |
===========================================
|  1 : Recherche sur l'utilisateur        |
|  2 : Recherche sur l'ordinateur         |
|  3 : Recherche par mots-clefs		      |
|  x : Retour au menu précédent           |
===========================================
    "

$choix_log = Read-Host "Faites votre choix : "

switch ($choix_log)
{

    1{
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Logs - Recherche sur l'utilisateur"
        Write-Host "Recherche par utilisateur"
        $recherche = $env:USERNAME
        Get-Content -Path .\log_evt.log | findstr "$recherche"
        }
    2{
        Write-Host "Recherche par Ordinateur"
        $recherche = $env:COMPUTERNAME
        Get-Content -Path .\log_evt.log | findstr "$recherche"
        }
    3{
        Write-Host "Recherche par mots-clefs"
        $recherche = Read-Host "Renseignez le ou les mot(s) clef(s) "
        Get-Content -Path .\log_evt.log | findstr "$recherche"
        }
    x {
        Write-Host "Retour au menu précédent"
        menu_info
        }

    default {
        Write-Host "Erreur, réessayer"
        sleep -Seconds 1
        search_log
        }


}
}
search_log

___________________________________________________________________________________________________________________________________________________________________

Theofile


#projet2.ps1
function co_SSH {
    # Demander nom utilisateur     
    $utilisateur=Read-Host -Prompt  "indiquez l'utilisateur sur lequel vous connecter "                                                 
    # Demander l'IP de l'utilisateur
    $ip=Read-Host -Prompt "indiquer l'IP du poste client"
    # nom de l'utilisateur
     Write-Host "$utilisateur"
     Write-Host "$ip"
}

co_SSH

function menu_action {                                                

    # Menu des actions, choix à faire pour intéragir sur un compte utilisateur ou sur une machine directement

    Write-Host
" 
=========================================================
     |  		   	Menu Action	                |
=========================================================
|       1 : Gestion de l'utilisateur	        |
|       2 : Gestion de l'ordinateur			    |
|       3 : Prise de main à distance			|
|	    X : Retour au menu principal			|
=========================================================   

"
$choix = Read-Host -Prompt "faites votre choix"




switch ($choix){ 

    '1' {
    # definir le chemin du fichier de log

        $logFilePath = "C:\Logs\log_evt.txt"

    # obtenir la date et l'heure souhaitée

        $date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

    # Construire le message de log 

      $message = "$date - $utilisateur - Action - Vers la gestion utilisateur"

     # Écrire le message dans le fichier de log
     
       Add-Content -Path $logFilePath -Value $message
 
    }
 
    '2'{ 
        # Construire le message de log 

      $message = "$date - $utilisateur - Action - Vers la gestion de l'ordinateur"

     # Écrire le message dans le fichier de log
     
       Add-Content -Path $logFilePath -Value $message
    
     }
    
    3 {  
        
        # Construire le message de log 

         ssh "$utilisateur@$ip"
        
         $message = "$date - $utilisateur - Action - Prise de main à distance de $ip sous l'utilisateur $utilisateur" 

		  # Écrire le message dans le fichier de log
     
          Add-Content -Path $logFilePath -Value $message
      Write-Host "bonjour"
        }

   'X'{

   $message = "$date - $utilisateur - Retour au menu principal" 

   # Écrire le message dans le fichier de log
     
   Add-Content -Path $logFilePath -Value $message

		Write-Host "Retour au menu principal."
   }
   
}
}
   menu_action


___________________________________________________________________________________________________________________________________________________________________



# Mise à jour du système 

function maj_system {

    # Installer toutes les mises à jour disponibles et redémarrer le système

    Write-Host "Ordinateur - Action - Installation des Mises à jours :"
    Get-WindowsUpdate -AcceptAll -Install 


    Write-Host  "Le système doit être redémarré pour appliquer les mises à jour"

    $choix_action = Read-Host "Voulez-vous redémarrer votre ordinateur ?"


    Switch ($choix_action) {

      # Oui pour redémarrer le système cible après la mise à jour
      o|O|y|Y|Oui|oui|yes|Yes {
      Write-Host "Ordinateur - Action - Redémarrage du système :"
      Restart-Computer
      Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc"
      }
     # Tout autre valeur pour ne pas redémarrer le système cible
     
     * {
     Write-Host "Pensez à redémarrer votre ordinateur pour l'applications des Mises à Jours."
     Write-Host "Retour au Menu Principal"
     Start-Sleep -Seconds 2
      }

      }

      }

      maj_system
      
___________________________________________________________________________________________________________________________

$utilisateur = "Wilder"
$ip = "172.16.10.10"

function info_disk {
    Write-Host "
==============================================================
|              Information Disque                            |
==============================================================
|   1 : Afficher nombre de disque                            |
|   2 : Afficher les informations partitions par disque      |
|   3 : Afficher l'espace disque restant                     |
|   4 : Afficher le nom et l'espace disque d'un dossier      |
|   5 : Afficher les lecteurs montés                         |
|   P : Retour au menu principal                             |
=============================================================="

    $choix_disque = Read-Host "Faites votre choix"

    switch ($choix_disque) {
        1 {
            Add-Content -Path "C:\Perflogs\log_de.txt" -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Info - Afficher le nombre de disques"
            $disque = Read-Host "Sur quel disque voulez-vous l'information ? (ex: C;)"
            Invoke-Command -ComputerName $ip -Credential $utilisateur -ScriptBlock {  Get-Disk | Format-Table Number, FriendlyName, OperationalStatus, Size -AutoSize }
            Start-Sleep -Seconds 5
        }
        2 {
            Add-Content -Path "C:\Perflogs\log_de.txt" -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Info - Afficher les informations partitions par disques"
            Invoke-Command -ComputerName $ip -Credential $utilisateur -ScriptBlock { Get-Partition | Format-Table DiskNumber, PartitionNumber, DriveLetter, Size -AutoSize }
            Start-Sleep -Seconds 5
        }
        3 {
            Add-Content -Path "C:\Perflogs\log_de.txt" -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Info - Afficher l'espace disque restant"
            Invoke-Command -ComputerName $ip -Credential $utilisateur -ScriptBlock { Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{Name='FreeSpace(GB)';Expression={[math]::round($_.Free/1GB,2)}}, @{Name='UsedSpace(GB)';Expression={[math]::round(($_.Used/1GB),2)}} | Format-Table -AutoSize }
            Start-Sleep -Seconds 5
        }
        4 {
            Add-Content -Path "C:\Perflogs\log_de.txt" -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Info - Afficher le nom et l'espace disque d'un dossier"
            $disk = Read-Host "Indiquez le dossier sur lequel le disque est monté"
            Invoke-Command -ComputerName $ip -Credential $utilisateur -ScriptBlock { Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{Name='FreeSpace(GB)';Expression={[math]::round($_.Free/1GB,2)}}, @{Name='UsedSpace(GB)';Expression={[math]::round(($_.Used/1GB),2)}} | Format-Table -AutoSize }
            Start-Sleep -Seconds 5
        }
        5 {
            Add-Content -Path "C:\Perflogs\log_de.txt" -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Info - Afficher les lecteurs montés"
            Invoke-Command -ComputerName $ip -Credential $utilisateur -ScriptBlock {  Get-Volume | Format-Table DriveLetter, FileSystemLabel, FileSystem, SizeRemaining, Size -AutoSiz }
            Start-Sleep -Seconds 5
        }
        "P" {
            Add-Content -Path "C:\Perflogs\log_de.txt" -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Retour au menu principal"
            Start-Sleep -Seconds 1
        }
        default {
            Write-Host "Erreur : Option invalide."
            info_disk
        }
    }
}

__________________________________________________________________________________________________________________________________________________

function droits_utilisateur {
    Write-Host "
=========================================================
|              Gestion droits utilisateur               |
=========================================================
| 1 - Droits utilisateur fichier                        |
| 2 - Droits utilisateur dossier                        |
| x - Menu précédent                                    |
========================================================="

    $choix_utilisateur = Read-Host "Quels informations souhaitez-vous ?"

    switch ($choix_utilisateur) {
        1 {
            $nom_fichier = Read-Host "Entrez le nom du fichier"
            if (Test-Path -Path $nom_fichier -PathType Leaf) {
                Write-Host "Droits attribués au fichier $nom_fichier :"
                Get-Acl -Path $nom_fichier | Format-List
            } else {
                Write-Host "Le fichier $nom_fichier n'existe pas."
            }
        }
        2 {
            $nom_dossier = Read-Host "Entrez le nom du dossier"
            if (Test-Path -Path $nom_dossier -PathType Container) {
                Write-Host "Droits attribués au dossier $nom_dossier :"
                Get-Acl -Path $nom_dossier | Format-List
            } else {
                Write-Host "Le dossier $nom_dossier n'existe pas."
            }
        }
        "x" { 
            # Retour au menu précédent
            return
        }
        default {
            Write-Host "Option invalide, veuillez réessayer."
            droits_utilisateur
        }
    }
}

function historique_de_commande {
 # Accès à l'historique des commandes de l'utilisateur cible
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Utilisateur - Info - Historique des commandes de l'utilisateur"
            Invoke-Command -ComputerName $ip -Credential $utilisateur -ScriptBlock {Write-Host "Consultation de l'historique des commandes de l'utilisateur en cours..."
            Get-History | Format-Table -AutoSize}
}



