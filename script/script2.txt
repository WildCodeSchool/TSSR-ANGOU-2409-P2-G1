FONCTION ACTION
_____________________________________________________________________________________________________________________________________________________________________________

# Fonction pour la gestion de l'alimentation du PC cible

function Gestion-Alim {
    Clear-Host
    Write-Host "
=========================================================
|               Gestion de l'alimentation               |
=========================================================
|     1 - Arrêter l'ordinateur                          |
|     2 - Redémarrer l'ordinateur                       |
|     3 - Verrouiller l'ordinateur                      |
|     X - Menu précédent                                |
=========================================================
"
    $choix = Read-Host "Faites votre choix"

    switch ($choix) {
        1 {
            $confirm = Read-Host "Êtes-vous sûr de vouloir arrêter l'ordinateur ? (o/n)"
            if ($confirm -match '^(o|O)$') {
                $log = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Action - Arrêt Ordinateur"
                Add-Content -Path "C:\Logs\log_evt.txt" -Value $log
                Stop-Computer -Force
            } else {
                Write-Host "Action annulée."
                Start-Sleep -Seconds 1
                Gestion-Alim
            }
        }
        2 {
            $confirm = Read-Host "Êtes-vous sûr de vouloir redémarrer l'ordinateur ? (o/n)"
            if ($confirm -match '^(o|O)$') {
                $log = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Action - Redémarrage Ordinateur"
                Add-Content -Path "C:\Logs\log_evt.txt" -Value $log
                Restart-Computer -Force
            } else {
                Write-Host "Action annulée."
                Start-Sleep -Seconds 1
                Gestion-Alim
            }
        }
        3 {
            $log = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Ordinateur - Action - Verrouillage Ordinateur"
            Add-Content -Path "C:\Logs\log_evt.txt" -Value $log
            rundll32.exe user32.dll, LockWorkStation
        }
         X {
            $log = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - Retour au menu précédent"
            Add-Content -Path "C:\PerfLogs\log_evt.log" -Value $log
            Write-Host "Retour au menu précédent."
            gestion_computer
        }
        Default {
            Write-Host "Option invalide. Veuillez réessayer."
            Start-Sleep -Seconds 1
            Gestion-Alim
            }
    }
}


# Fonction pour la gestion de répertoires
function gestion_directory {
    Clear-Host
    Write-Output "=================================="
    Write-Output "|   Gestion des répertoires      |"
    Write-Output "=================================="
    Write-Output "| 1 - Création de répertoire     |"
    Write-Output "| 2 - Modification de répertoire |"
    Write-Output "| 3 - Suppression de répertoire  |"
    Write-Output "| x - Menu précédent             |"
    Write-Output "=================================="
    
    $Choix_Directory = Read-Host "Faites votre choix : "
  
    switch ($Choix_Directory) {
    # Créer le répertoire à partir du nom et du chemin renseignés
        1 { $pathdir = Read-Host "Quel est le chemin du dossier que vous souhaitez créer ?" ; 
            $directory = Read-Host "Quel dossier souhaitez-vous créer à partir de $pathdir ?" ; 
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Création de Répertoire $directoy" ;
            New-Item -Path $pathdir\ -ItemType Directory -Name $directory ;
            Write-Output "Création de $directory effectuée."
        }
    # Modifier le répertoire à partir du nom, du chemin et du nouveau nom renseignés
        2 { $pathdir = Read-Host "Quel est le chemin du dossier que vous souhaitez modifier ?" ;
            $directory = Read-Host "Quel est le nom du dossier que vous souhaitez modifier ?" ;
            $dir_name = Read-Host "Quel nouveau nom souhaitez lui donner ?" ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Modification de Répertoire $directory" ;
            Rename-Item -Path $pathdir\$directory -NewName $dir_name ;
            Write-Output "Modification de $directory en $dir_name effectuée."
        }
    # Supprimer le répertoire à partir du nom et du chemin renseignés 
        3 { $pathdir = Read-Host "Quel est le chemin du dossier que vous souhaitez supprimer ?" ; 
            $directory = Read-Host "Quel dossier souhaitez-vous supprimer ?" ;
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Modification de Répertoire $directory" ;
            Remove-Item -Path $pathdir\$directory ;
            Write-Output "Suppression de $directory effectuée"
        }
    # Retour au menu précédent
        x { Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent $directory" ;
            Write-Host "Retour Menu Précédent" ; 
            menu_action
        }
    # Retour au menu précédent
        X { Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent $directory" ;
            Write-Host "Retour Menu Précédent" ; 
            menu_action
        }
    # En cas d'erreur, retour au menu de la fonction
        Default { Write-Output "Erreur retour au choix" ; 
            gestion_directory
        }
    }
}

#gestion_firewall.ps1

# Menu de Gestion du pare-feu
function gestion_firewall {
    Clear-Host
    Write-Host "=============================="
    Write-Host "|     Gestion du pare-feu    |"
    Write-Host "=============================="
    Write-Host "| 1 - Activer le pare-feu    |"
    Write-Host "| 2 - Désactiver le pare-feu |"
    Write-Host "| x - Menu précédent         |"
    Write-Host "=============================="

    $choix_firewall = Read-Host "Faites votre choix : "
    
    switch ($choix_firewall) {
        # Activer le pare-feu
        1{
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Activation du pare-feu" ;
            Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True ;
            Write-Host "Pare-feu activé" ;
            Start-Sleep -Seconds 2
        }
        # Désactiver le pare-feu
        2 {
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Désactivation du pare-feu" ;
            Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False ;
            Write-Host "Pare-feu désactivé" ;
            Start-Sleep -Seconds 2
        }
        # Retour au menu précédent
        x {
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2 ;
            gestion_computer
        }
        # Retour au menu précédent
        X {
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2 ;
            gestion_computer
        }
        # En cas d'erreur, retour au menu de la fonction
        Default {
            gestion_firewall
        }
    }
}

#gestion_groupe.ps1

# Menu de Gestion des groupes
function gestion_groupe {
    Clear-Host
    Write-Host "=========================================="
    Write-Host "|          Gestion des groupes           |"
    Write-Host "=========================================="
    Write-Host "| 1 - Ajout à un groupe d'administration |"
    Write-Host "| 2 - Ajout à un groupe local            |"
    Write-Host "| 3 - Sortie d'un groupe local           |"
    Write-Host "| x - Menu précédent                     |"
    Write-Host "=========================================="

    $choix_groupe = Read-Host "Faites votre choix : "

    switch ($choix_groupe) {
        # Ajout de l'utilisateur cible au groupe d'administration
        1 {  $wilder = Read-Host "Indiquez quel utilisateur à ajouter au groupe d'administration" ;
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Ajout de l'utilisateur : $wilder au groupe administrateur" ;
        Add-LocalGroupMember -Group "Administrateurs" -Member "$wilder" ;
        Start-Sleep -Seconds 2
        }

        # Ajout de l'utilisateur cible au groupe local
        2 {  $wilder = Read-Host "Renseignez l'utilisateur sur lequel travailler : " ;
        $groupe = Read-Host "Renseignez le groupe auquel vous souhaitez ajouter l'utilisateur : " ;
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Ajout de l'utilisateur : $wilder au groupe : $groupe" ;
        Add-LocalGroupMember -Group "$groupe" -Member "$wilder" ;
        Start-Sleep -Seconds 2
        }

        # Sortie de l'utilisateur cible d'un groupe local
        3 {  $wilder = Read-Host "Renseignez l'utilisateur sur lequel travailler : " ;
        $groupe = Read-Host "Renseignez le groupe auquel vous souhaitez supprimer l'utilisateur" ;
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Action - Suppression de l'utilisateur : $wilder du groupe : $groupe" ;
        Remove-LocalGroupMember -Group "$groupe" -Member "$wilder" ;
        Start-Sleep -Seconds 2
        }

        # Retour au menu précédent
        x {  Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2
        }

        # Retour au menu précédent
        X {  Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Retour au menu précédent" ;
            Write-Host "Retour au menu précédent" ;
            Start-Sleep -Seconds 2
        }

        # En cas d'erreur, retour au menu de la fonction
        Default {
            gestion_groupe
        }
    }
    
}
_____________________________________________________________________________________________________________________________________________________________________________
FONCTION INFORMATION

# Fonction pour obtenir la version de l'OS
function version_OS {
    Clear-Host
    Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Info - Version de l'OS"
    Get-WmiObject Win32_OperatingSystem | findstr /C:"Version"
    
}

# Fonction pour obtenir les informations RAM (/!\ Pas fonctionnel sur VM /!\ Solution à trouver)
function info_ram {
    Clear-Host
    Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Info - RAM"
    Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object FreePhysicalMemory, TotalVisibleMemorySize
}
___________________________________________________________________________________________________________________________________________________________________________
FONCTON ACTIVITE ORDI

## Menu de l'activité de l'ordinateur cible

function activite_ordi {

    Clear-Host
    Write-Host "
    ==================================================
    | 		Activité ordinateur	             |
    | 1 : Liste des applications / paquets installés |
    | 2 : Liste des services en cours d'exécution    |
    | 3 : Liste des utilisateurs locaux		     |
    | X : Retour au menu précédent		     |
    ==================================================
        "


    $choix_activite = Read-Host "Faites votre choix"


# Affichage de la liste des applications/ paquets installés sur l'ordinateur cible

    Switch ($choix_activite) {
        1 {
            Write-Host "Ordinateur - Info - Liste des applications / paquets installées :"
            Get-Package
	    Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc
            Start-Sleep -Seconds 3
            activite_ordi


# Affichage de la liste des services en cours d'exécution

        }
        2 { 
            Write-Host "Ordinateur - Info - Liste des services en cours d'execution :"
            Get-Service | Where-Object { $_.Status -eq "Running" }
	    Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc
            Start-Sleep -Seconds 3
            activite_ordi


# Affichage de la liste des utilisateurs locaux

        }

        3 { 
            Write-Host "Ordinateur - Info - Liste des utilisateurs locaux :"
            Get-LocalUser | Format-Table -AutoSize
            Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc
            Start-Sleep -Seconds 3
            activite_ordi
        }

# Retour au menu précédent

        x {Write-Host "Retour Menu Précédent" ; 
        menu_action}

         X {Write-Host "Retour Menu Précédent" ; 
        menu_action}

        Default {Write-Output "Erreur retour au choix" ; activite_ordi}
    }

}

activite_ordi

__________________________________________________________________________________________________________________________________________________________________________

function search_log {
$logc = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $env:USERNAME - $env:COMPUTERNAME"
Clear-Host

Write-Host "
===========================================
| 	     Type de recherche	              |
===========================================
|  1 : Recherche sur l'utilisateur        |
|  2 : Recherche sur l'ordinateur         |
|  3 : Recherche par mots-clefs		      |
|  x : Retour au menu précédent           |
===========================================
    "

$choix_log = Read-Host "Faites votre choix : "

switch ($choix_log)
{

    1{
        Add-Content -Path C:\PerfLogs\log_evt.log -Value "$logc - Logs - Recherche sur l'utilisateur"
        Write-Host "Recherche par utilisateur"
        $recherche = $env:USERNAME
        Get-Content -Path .\log_evt.log | findstr "$recherche"
        }
    2{
        Write-Host "Recherche par Ordinateur"
        $recherche = $env:COMPUTERNAME
        Get-Content -Path .\log_evt.log | findstr "$recherche"
        }
    3{
        Write-Host "Recherche par mots-clefs"
        $recherche = Read-Host "Renseignez le ou les mot(s) clef(s) "
        Get-Content -Path .\log_evt.log | findstr "$recherche"
        }
    x {
        Write-Host "Retour au menu précédent"
        menu_info
        }

    default {
        Write-Host "Erreur, réessayer"
        sleep -Seconds 1
        search_log
        }


}
}
search_log

___________________________________________________________________________________________________________________________________________________________________

Theofile


#projet2.ps1
function co_SSH {
    # Demander nom utilisateur     
    $utilisateur=Read-Host -Prompt  "indiquez l'utilisateur sur lequel vous connecter "                                                 
    # Demander l'IP de l'utilisateur
    $ip=Read-Host -Prompt "indiquer l'IP du poste client"
    # nom de l'utilisateur
     Write-Host "$utilisateur"
     Write-Host "$ip"
}

co_SSH

function menu_action {                                                

    # Menu des actions, choix à faire pour intéragir sur un compte utilisateur ou sur une machine directement

    Write-Host
" 
=========================================================
     |  		   	Menu Action	                |
=========================================================
|       1 : Gestion de l'utilisateur	        |
|       2 : Gestion de l'ordinateur			    |
|       3 : Prise de main à distance			|
|	    X : Retour au menu principal			|
=========================================================   

"
$choix = Read-Host -Prompt "faites votre choix"




switch ($choix){ 

    '1' {
    # definir le chemin du fichier de log

        $logFilePath = "C:\Logs\log_evt.txt"

    # obtenir la date et l'heure souhaitée

        $date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

    # Construire le message de log 

      $message = "$date - $utilisateur - Action - Vers la gestion utilisateur"

     # Écrire le message dans le fichier de log
     
       Add-Content -Path $logFilePath -Value $message
 
    }
 
    '2'{ 
        # Construire le message de log 

      $message = "$date - $utilisateur - Action - Vers la gestion de l'ordinateur"

     # Écrire le message dans le fichier de log
     
       Add-Content -Path $logFilePath -Value $message
    
     }
    
    3 {  
        
        # Construire le message de log 

         ssh "$utilisateur@$ip"
        
         $message = "$date - $utilisateur - Action - Prise de main à distance de $ip sous l'utilisateur $utilisateur" 

		  # Écrire le message dans le fichier de log
     
          Add-Content -Path $logFilePath -Value $message
      Write-Host "bonjour"
        }

   'X'{

   $message = "$date - $utilisateur - Retour au menu principal" 

   # Écrire le message dans le fichier de log
     
   Add-Content -Path $logFilePath -Value $message

		Write-Host "Retour au menu principal."
   }
   
}
}
   menu_action
